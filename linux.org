* 工具篇
** 调试工具
*** binutils
*** gdb
- [[https://www.cse.unsw.edu.au/~learn/debugging/modules/gdb_init_file/][.gdbinit]]
- [[https://www.jianshu.com/p/94a71af2022a][pdea, gef, pwndbg]]

gdbinit 例子:
#+begin_src sh
printf "\n"
printf "User commands:\n"
printf "mode <num>: 1.peda 2.gef\n"
printf "\n"

define mode
    if $arg0 == 1
        source /home/ubuntu/Codes/peda/peda.py
    else
        if $arg0 == 2
            source /home/ubuntu/Codes/gef/gef.py
        else
            printf "Error! Please input the right number.\n"
        end
    end
end

document mode
    mode <num>
    <num>: 1.peda 2.gef
end
#+end_src
** 网络工具
*** 程序绑定到端口
#+begin_src shell
nc -lvp 4000 | ./some_prog
socat tcp-listen:10001,reuseaddr,fork EXEC:./some_prog,pty,raw,echo=0
#+end_src
*** 使用 socks5 转发所有流量
http://darkk.net.ru/redsocks/
** 系统权限
*** capabilites
Linux 2.2 增加了 capabilities 的概念，可以理解为水平权限的分离。
以往如果需要某个程序的某个功能需要特权，我们就只能使用 root 来执行或者
给其增加 SUID 权限，一旦这样，我们等于赋予了这个程序所有的特权，
这是不满足权限最小化的要求的；在引入 capabilities 后，root 的权限
被分隔成很多子权限，这就避免了滥用特权的问题，我们可以在
[[http://man7.org/linux/man-pages/man7/capabilities.7.html][capabilities(7)]] 中看到这些特权的说明。

类似于 ping 和 nmap 这样的程序，他们其实只需要网络相关的特权即可。
所以，如果你在 Kali 下查看 ping 命令的 capabilities，你会看到一个`cap_net_raw`：

#+begin_example shell
$ ls -al /bin/ping
-rwxr-xr-x 1 root root 73496 Oct  5 22:34 /bin/ping
$ getcap /bin/ping
/bin/ping = cap_net_raw+ep
#+end_example

这就是为什么 kali 的 ping 命令无需设置 setuid 权限，
却仍然可以以普通用户身份运行的原因。

同样，我们也可以给 nmap 增加类似的 capabilities：

#+begin_src shell
sudo setcap cap_net_raw,cap_net_admin,cap_net_bind_service+eip /usr/bin/nmap
nmap --privileged -sS 192.168.1.1
#+end_src

* 系统篇
** 管道
- 管道有大小限制 65536
- 管道中写满数据后, 再往管道中写, 写入数据的进程会阻塞
- 管道中没有数据时, 从管道中读, 读取数据的进程会阻塞

如果 write() 向一个没有任何进程连接的管道中写数据, SIGPIPE 信号会被放到的写进程,
默认的信号处理函数会终止进程. 在有其他进程向管道写的时候, 如果唯一的读进程关闭了
读端, 所有的写进程都会收到 SIGPIPE. 只要有写端没有关闭, 读端就会一直阻塞等待.

只要管道中的字节数不超过 PIPE_BUF, 写就是原子的.

进程不能对管道执行 seek().
** inotify
在 2.6.13 之后，inotify 取代了旧有的 dnotify，克服了它的缺陷。

用户接口
#+begin_src C
#include <sys/inotify.h>
/* 创建 inotify 实例，fd 指向一个 struct inotify_event 队列 */
int fd = inotify_init();
/* 向 fd 中添加对 path 的由 mask 指定的监视，返回监视描述符 */
int wd = inotify_add_watch(fd, path, mask);
/* 移除 fd 中的 wd 监视 */
int ret = inotify_rm_watch(fd, wd);

struct inotify_event {
  int       wd;        /* Watch descriptor */
  uint32_t  mask;      /* Mask describing event */
  uint32_t  cookie;    /* cookie to synchronize two events */
  uint32_t  len;       /* length (including nulls) of name */
  char      name[];    /* stub for possible name */
};
#+end_src
可以在函数 inotify_init() 返回的 fd 上使用 select()，poll() 或 ioctl 命令
FIONREAD 来得到当前队列的长度。另外 close(fd) 将删除所有添加到 fd 中的
watch 并做必要的清理。

例子:
#+begin_src C
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/inotify.h>
#include <unistd.h>

#define EVENT_NUM 12
char *event_str[EVENT_NUM] = {
  "IN_ACCESS",          // File was accessed
  "IN_MODIFY",          // File was modified
  "IN_ATTRIB",          // File attributes were changed
  "IN_CLOSE_WRITE",     // Writtable file closed
  "IN_CLOSE_NOWRITE",   // Unwrittable file closed
  "IN_OPEN",            // File was opened
  "IN_MOVED_FROM",      // File was moved from X
  "IN_MOVED_TO",        // File was moved to Y
  "IN_CREATE",          // Subfile was created
  "IN_DELETE",          // Subfile was deleted
  "IN_DELETE_SELF",     // Self was deleted
  "IN_MOVE_SELF",       // Self was moved
};

int main(int argc, char *argv[]) {
  int fd, wd, len, nread;
  char buf[1024];
  struct inotify_event *event;

  fd = inotify_init();
  wd = inotify_add_watch(fd, argv[1], IN_ALL_EVENTS);
  buf[sizeof(buf) - 1] = 0;
  while ((len = read(fd, buf, sizeof(buf) - 1)) > 0) {
    nread = 0;
    while (len > nread) {
      event = (struct inotify_event *)&buf[nread];
      if (event->mask & IN_ISDIR) printf("Directory:\n");
      for (int i = 0; i < EVENT_NUM; i++) {
        if ((event->mask >> i) & 1) {
          if (event->len > 0)
            printf("%-20s --- %s\n", event_str[i], event->name);
          else printf("%-20s --- %s\n", event_str[i], " ");
        } // end if ((event->mask >> i) & 1)
      } // end for (int i = 0; i < EVENT_NUM; i++)
      nread = nread + sizeof(struct inotify_event) + event->len;
    } // end while (len > nread)
  } // end while ((len = read(fd, buf, sizeof(buf) - 1)) > 0)
  return 0;
}
#+end_src

ref: [[https://www.ibm.com/developerworks/cn/linux/l-inotifynew/index.html][ibm devloper]]

** 其他系统监控
https://github.com/microsoft/ProcMon-for-Linux

dtrace4linux allows you to trace some interesting tidbits of the kernel.

https://github.com/alexandernst/monks
http://alexandernst.github.io/monks/

www.sysdig.org/wiki/sysdig-examples/
sysdig -A -c echo_fds

iotop -o -b -P
strace linux
truss on Solaris, ktrace or dtrace under BSD

kqueue under BSD, and FAM (originally from SGI but now available as an API on many systems).http://en.wikipedia.org/wiki/File_Alteration_Monitor

auditctl
http://people.redhat.com/sgrubb/audit/
tracking file accesses: https://unix.stackexchange.com/questions/12390/tracking-huge-buffer-usage-under-linux/12398#12398
tracking process executiong: https://unix.stackexchange.com/questions/13017/log-every-invocation-of-every-suid-program/13024#13024

To watch all the system calls under Linux, you can use the audit subsystem. It's relatively recent and there's not much literature on the topic; search for auditctl or read the auditctl man page. There are a couple of examples on this site: tracking file accesses, tracking process execution.

** slab内存越界检查
- http://news.eeworld.com.cn/mp/ymc/a52757.jspx
** freeBSD
https://study.holmesian.org/FreeBSD/cvsup.html
* 综合利用
** kernel rootkit
rootkit 的分类:
- User-mode rootkits: typically, LD_PRELOAD-based
- Kernel-mode rootkits: typically, LKM-based
- Firmware-based (FW) rootkits (UEFI)
- Hypervisor (HV) rootkits
- Hybrid rootkits
*** Base techniques
**** Symbol
- 符号可以是导出的或者非导出的
- 公共 kernel API 仅包含导出的符号( 使用 EXPORT_SYMBOL() 宏 )
- 私有 kernel API 包含公共 API 和其他私有符号
找到 private kernel API:
- Read and parse /proc/kallsyms file
- Use ==kallsyms_lookup_name()==
- Use ==kallsyms_on_each_symbols()==
- Use signatures and by disassembling the kernel's code
- System.map ( mostly useless nowadays because of ASLR )
**** writing to the read-only memory
Write Protect (bit 16 of CR0) - When set, inhibits supervisor-level procdures
from writing into read-only pages; when clear, allows supervisor-levprocedures
to write into read-only pages (regardless of the U/S bit settinsee Section 4.1.3
and Section 4.6). This flag facilitates implementation of tcopy-on-write method
of creating a new process (forking) used by operatisystems such as UNIX.
***** native pax
#+begin_src C
static inline unsigned long native_pax_open_kernel(void)
{
    unsigned long cr0;

    preempt_disable();
    barrier();
    cr0 = read_cr0() ^ X86_CR0_WP;
    BUG_ON(unlikely(cr0 & X86_CR0_WP));
    write_cr0(cr0);
    return cr0 ^ X86_CR0_WP;
}

static inline unsigned long native_pax_close_kernel(void)
{
    unsigned long cr0;

    cr0 = read_cr0() ^ X86_CR0_WP;
    BUG_ON(unlikely(!(cr0 & X86_CR0_WP)));
    write_cr0(cr0);
    barrier();
    preempt_enable_no_resched();
    return cr0 ^ X86_CR0_WP;
}

native_pax_open_kernel();
sys_call_table[__NR_open] = my_sys_open;
// ... system behaviour code
native_pax_close_kernel();
#+end_src

汇编代码
#+begin_src asm
.macro disable_wp
    cli
    mov eax,cr0
    and eax,0xfffeffff
    mov cr0,eax
.endm

.macro enable_wp
    mov eax,cr0
    or eax,0x10000
    mov cr0,eax
    sti
.endm
#+end_src

***** vmap
使用 vmap 创建一个可写的映射到只读的区域
- 对于区域中的每个页, 将其翻译为 struct page 的虚拟地址
  kernel 的使用 =virt_to_page()=, modules 的使用 vmalloc_to_page().
- 使用 =vmap()= 将这些页映射为虚拟的连续空间 using page protection required
  (=PAGE_KERNEL=).
- 使用 =vunmap()= 恢复映射
#+begin_src C
void *map_writable (void*addr , size_t  len) {
  void *vaddr = NULL;
  void *paddr = (void*)(addr & PAGE_MASK);
  structpage *pages[ ... ];
  for (int i = 0; i < ARRAY_SIZE(pages); i++) {
    if (__module_address ((ulong)paddr))
      pages[i] = vmalloc_to_page(paddr);
    else pages[i] = virt_to_page(paddr);
    if (!pages[i])
      return NULL;
    paddr += PAGE_SIZE;
  }

  vaddr = vmap(pages, ARRAY_SIZE(pages), VM_MAP, PAGE_KERNEL);
  return vaddr? vaddr + offset_in_page(addr) : NULL;
}

size_t slen = __NR_syscall_max * sizeof(sys_call_ptr_t);
sys_call_ptr_t *sptr = map_writable(sys_call_table, slen);
sptr[__NR_open] = my_sys_open;
// ....
vunmap(sptr);
#+end_src
**** hooking in the kernel
- hooking system calls by replacing pointers in =sys_call_table[]=
  and =ia32_sys_call_table[]=.
- hooking virtual methods calls (vtable-like) by replacing pointers in tables
  like =struct file_operations=.
- hooking of kernel symbols by patching their code.
- registering any kind of callbacks and notifiers
  (e.g. =register_module_notifier()=).
- registering LSM security callbacks (hooks).

[[https://github.com/milabs/khook][KHOOK]] - 自动化的内核函数 hooking 引擎:
- based on overwriting target function prologue with =JMP xxx=.
- uses in-kernel length disassembler engine (LDE) to get the number of
  instructions to save before overwriting.
- 被 hook 的函数可以调用其原始函数.
- maintain a use-counter for each hooked function.
  This prevents unhooking of symbols which are in use.

提供了方便的 API:
- =KHOOK(xxx)= macro: declares a hook of function =xxx= (已在其他地方声明)
- =KHOOK_EXT(xxx, typeof(arg0), typeof(arg1), ...)= macro: declares a hook of
  function =xxx= (不用在其他地方声明)
- =KHOOK_GET(xxx)=, =KHOOK_PUT(xxx)= macros: manage symbol's hook use-counter.
- =KHOOK_ORIGIN(xxx, args...)=: calls to the original function.
- =khook_init()=: causes all decared hooks to be installed.
- =khook_cleanup()=:

#+begin_src C
#include "engine/engine.h"
#include "engine/engine.c"

// add the options to the linker
// ldflags-y += -T$(src)/engine/engine.lds
#+end_src

*** Common Techniques
  Demo: [[https://github.com/f0rb1dd3n/Reptile][Reptile]]
**** Hiding process
隐藏进程需要进行以下步骤:
- Managing the processes lifecycle. Be able to attach/detach some attributes
  to process while forking and executing.
- Managing the processes visibility by filtering out =/proc= and some system
  calls.
- Managing the processes CPU-time accounting.

  attach/detach
- Hook =copy_creds()= to be able to attach attributes to processes at fork
  time. Inherit parent process attributes for all direct children, if required
- Hook =exit_creds()= to be able to detach attributes from the processes at
  exit time.
- In it's simplest form at/detaching attributes to processes may be
  implemented by using one of unused bit of =task->flags=, e.g. 0x80000000.

  visibility
- Hook =next_tgid()= to able to filter out =/proc/PID= like directory
  entries. Just skip all the tasks with "hidden" attribute set from
  being iterated.
- Hook =find_task_by_vpid()= to be able to fight against [[https://github.com/Enrico204/unhide][unhide]] by altering
  system calls: =getsid=, =getpgid=, =getpriority=, =sched_getparam=,
  =sched_getaffinity=, =sched_getscheduler=, =sched_rr_get_interval=, =kill=.

CPU-time accouting
- Hook =account_process_tick()= to exclude ticks spent by a hidden processes
  from system wide ticks accounting.
**** Hiding files and directories
- Filtering the access to files or directories by using their full path
  (=open()=-like system calls).
- Filtering files and directories from being listed
  (=filldir()=-like system calls).

  To be able to filter out the access to files or directories by using their
filenames hook the following non-public kernel functions:
- =do_sys_open=
- =user_path_at=
- =user_path_at_empty=

  To filter out files and directories from being listed hook:
- =filldir=, =filldir64=, =fillondir=
- =compat_filldir=, =compat_filldir64=, =compat_fillonedir=
- =__d_lookup=

*** Advanced Techniques
**** kernel auditing bypass
**** filtering the kernel log
=dmesg= or =journalctl=
**** Matryoshka loader
[[https://github.com/milabs/kmatryoshka][kmatryoshka]]

- Write your =payload.ko= in form of LKM without any restrictions.
- Write the =loader.ko= module 来加载加密的 =payload.ko=
- Use =user_addr_max()= to get the current value of user-space address limit
- Extend the user-space address limit (SEG) to fit the decrypted payload
  and use =sys_load_module()= to load.
- 恢复 user-space address limit by using =user_addr_max()= and SEG value.
**** static string obfuscation
用整数代替字符串

** shellcode
- shellen

