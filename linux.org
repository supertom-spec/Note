* 工具篇
** 安装软件
*** apt
**** 修改更新源
sudo sed -i 's/archive.ubuntu/mirrors.aliyun/g' /etc/apt/sources.list
**** 递归下载离线 deb 包
#+begin_src sh
# 外网电脑准备：
sudo apt-get install dpkg-dev gnupg rng-tools
## 下载离线包
sudo rm -rf /var/cache/apt/archives/*  # 清空缓存目录
sudo apt-get -d install pkgs           # 仅下载
mkdir /var/debs
cp -r /var/cache/apt/archives/* /var/debs/

## 对包签名
sudo rngd -r /dev/urandom              # 避免生成随机数时间过长
gpg --gen-key                          # 生成公私钥对
gpg --list-key                         # 查看密钥对
gpg -a --export-secret-keys username > username_sk.sec # 导出私钥
gpg -a --export username > username_pk.pub             # 导出公钥
apt-ftparchive packages debs > debs/Packages
#apt-ftparchive sources debs > debs/Sources
cd debs; gzip -c Packages > Packages.gz
        #gzip -c Sources > Sources.gz
apt-ftparchive release ./ > Release
gpg --clearsign -o InRelease Release
gpg -abs -o Release.gpg Release

# 内网电脑操作：
## 同样拷贝到 /var/debs
## 修改更新本地源：
sudo apt-key add username_pk.pub       # 导入公钥
sudo gedit /etc/apt/sources.list
deb file:/var debs/
#deb-src file:/var debs/
sudo apt-get update
sudo apt-get install pkgs
#+end_src

#+begin_src sh
#!/bin/bash
basepath=$(cd `dirname $0`; pwd)
pkg="$*"

function getDepends()
{
  ret=`apt-cache depends $1 | grep -i Depends | cut -d: -f2 | tr -d "<>"`
  if [[ -z $ret ]]; then
#    echo "$1 No depends"
     echo -n
  else
    for i in $ret
    do
       if [[ `echo $pkg | grep -e "$i "` ]]; then
#         echo "$i already in set"
         echo -n
       else
         pkg="$pkg $i"
         echo "Downloading $i"
         getDepends $i
       fi
    done
  fi
}

for j in $@
do
  getDepends $j
done

echo $pkg
#apt install $pkg --reinstall -d -y
for p in $pkg
{
  apt-get download $p -d -y
}
#+end_src
**** oh-my-zsh
#+begin_src sh
sudo apt-get install zsh
chsh -s $(which zsh)
echo $SHELL # /usr/bin/zsh
sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
# 设置 ys 主题
sudo vim ~/.zshrc
ZSH_THEME="ys"
source ~/.zshrc
# 安装语法高亮
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
echo "source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"\
     >> ${ZDOTDIR:-$HOME}/.zshrc
#+end_src

#+RESULTS:

**** 桌面快捷方式
wine 好绿色程序后, 在 /usr/bin 下建一个新的 xxx 程序
#+begin_src shell
#!/bin/bash
FILENAME="z:${1//\//\\}"
wine "/home/username/software/path/xxx.exe" $FILENAME
#+end_src
在 ~/.local/share/applications/ 目录下建一个新的 [[https://developer.gnome.org/desktop-entry-spec/][Entry]]
#+begin_example
[Desktop Entry]
Name=xxx
Exec=~/bin/xxx %F
Terminal=false
Version=1.0
Type=Application
Icon=/home/username/software/path/xxx.exe.png
#+end_example
右键文件->属性，可以定义文件的默认打开方式，或者
#+begin_src shell
/etc/gnome/defaults.list                    # 全局
~/.local/share/applications/mimeinfo.cache  # 个人
#+end_src
** 文本处理
*** sed
*** awk
** 编译工具
*** make
*** git
**** 分支
#+begin_example
git branch develop                     # 建立分支
git checkout develop                   # 转到分支
git push origin develop:remote_develop # 推送分支
git checkout master
git cherry-pick 62ecb3                 # 合并指定 commit
#+end_example
**** 发布 release 版本
#+begin_example
git tag -a v0.1 -m "First release"
git push origin v0.1
#+end_example
** 调试工具
*** binutils
*** gdb
- [[https://www.cse.unsw.edu.au/~learn/debugging/modules/gdb_init_file/][.gdbinit]]
- [[https://www.jianshu.com/p/94a71af2022a][pdea, gef, pwndbg]]

gdbinit 例子:
#+begin_src sh
printf "\n"
printf "User commands:\n"
printf "mode <num>: 1.peda 2.gef\n"
printf "\n"

define mode
    if $arg0 == 1
        source /home/ubuntu/Codes/peda/peda.py
    else
        if $arg0 == 2
            source /home/ubuntu/Codes/gef/gef.py
        else
            printf "Error! Please input the right number.\n"
        end
    end
end

document mode
    mode <num>
    <num>: 1.peda 2.gef
end
#+end_src
** 网络工具
*** 程序绑定到端口
#+begin_src shell
nc -lvp 4000 | ./some_prog
socat tcp-listen:10001,reuseaddr,fork EXEC:./some_prog,pty,raw,echo=0
#+end_src
** 系统权限
*** capabilites
Linux 2.2 增加了 capabilities 的概念，可以理解为水平权限的分离。
以往如果需要某个程序的某个功能需要特权，我们就只能使用 root 来执行或者
给其增加 SUID 权限，一旦这样，我们等于赋予了这个程序所有的特权，
这是不满足权限最小化的要求的；在引入 capabilities 后，root 的权限
被分隔成很多子权限，这就避免了滥用特权的问题，我们可以在
[[http://man7.org/linux/man-pages/man7/capabilities.7.html][capabilities(7)]] 中看到这些特权的说明。

类似于 ping 和 nmap 这样的程序，他们其实只需要网络相关的特权即可。
所以，如果你在 Kali 下查看 ping 命令的 capabilities，你会看到一个`cap_net_raw`：

#+begin_example shell
$ ls -al /bin/ping
-rwxr-xr-x 1 root root 73496 Oct  5 22:34 /bin/ping
$ getcap /bin/ping
/bin/ping = cap_net_raw+ep
#+end_example

这就是为什么 kali 的 ping 命令无需设置 setuid 权限，
却仍然可以以普通用户身份运行的原因。

同样，我们也可以给 nmap 增加类似的 capabilities：

#+begin_src shell
sudo setcap cap_net_raw,cap_net_admin,cap_net_bind_service+eip /usr/bin/nmap
nmap --privileged -sS 192.168.1.1
#+end_src

* 系统篇
** 进程
** 管道
- 管道有大小限制 65536
- 管道中写满数据后, 再往管道中写, 写入数据的进程会阻塞
- 管道中没有数据时, 从管道中读, 读取数据的进程会阻塞

如果 write() 向一个没有任何进程连接的管道中写数据, SIGPIPE 信号会被放到的写进程,
默认的信号处理函数会终止进程. 在有其他进程向管道写的时候, 如果唯一的读进程关闭了
读端, 所有的写进程都会收到 SIGPIPE. 只要有写端没有关闭, 读端就会一直阻塞等待.

只要管道中的字节数不超过 PIPE_BUF, 写就是原子的.

进程不能对管道执行 seek().
** 伪终端 tty, pty, pts
- tty 是 teletypes 或者 teletypewriters 的缩写, 原指通过串行线用打印机键盘阅读和
  发送消息的东西, 后来被键盘和显示器取代.
- pty 是 pseudo-tty 的缩写, 即远程登录时产生的虚拟终端.
- pts (pseudo-terminal slave) 是 pty 的实现方法, 与 ptmx(pseudo-terminal master)
  配合使用实现 pty.
 
#+begin_src sh :results raw
ls -la /dev/tty /dev/tty1 /dev/tty63 /dev/ttyS0 /dev/ttyS3
ls -la /dev/pts/
#+end_src

#+RESULTS:
crw-rw-rw- 1 root tty     5,  0 Sep  8 01:06 /dev/tty
crw--w---- 1 root tty     4,  1 Sep  7 06:11 /dev/tty1
crw--w---- 1 root tty     4, 63 Sep  7 06:11 /dev/tty63
crw-rw---- 1 root dialout 4, 64 Sep  7 06:11 /dev/ttyS0
crw-rw---- 1 root dialout 4, 67 Sep  7 06:11 /dev/ttyS3
total 0
drwxr-xr-x  2 root root    0 Sep  7 06:11 .
drwxr-xr-x 17 root root 4100 Sep  7 06:11 ..
c---------  1 root root 5, 2 Sep  7 06:11 ptmx

可以看到 linux 中的终端分为以下几种:
- 串行终端 (/dev/ttySX) : 设备号分别为 (4,0), (4,1).., 对应 DOS 下的 COM1, COM2.
可以 echo 数据, 可以接串口来实验.
- 控制终端 (/dev/tty) : 当前进程的控制终端, 设备号为 (5,0), 使用命令 tty 可以查
看它实际对应的设备. /dev/tty 有点个像是到实际终端的一个链接.
- 控制台终端 (/dev/ttyX, /dev/console) : /dev/tty0 为当前控制台终端 /dev/ttyX 的
别名, 系统所产生的信息会发送到 /dev/tty0.
- 虚拟终端 (/dev/pts/X) : 在 XWindows 模式下的伪终端, telnet 或 ssh 等方式登录时
亦使用 pts (通过 getty). 例如: telnet->pts->ptms->getty.

当 /dev/fd* (Framebuffer) 设备没有启用时, 可以通过 /dev/tty0 访问显卡.

* 综合利用
** kernel rootkit
rootkit 的分类:
- User-mode rootkits: typically, LD_PRELOAD-based
- Kernel-mode rootkits: typically, LKM-based
- Firmware-based (FW) rootkits (UEFI)
- Hypervisor (HV) rootkits
- Hybrid rootkits
*** Base techniques
**** Symbol
- 符号可以是导出的或者非导出的
- 公共 kernel API 仅包含导出的符号( 使用 EXPORT_SYMBOL() 宏 )
- 私有 kernel API 包含公共 API 和其他私有符号
找到 private kernel API:
- Read and parse /proc/kallsyms file
- Use ==kallsyms_lookup_name()==
- Use ==kallsyms_on_each_symbols()==
- Use signatures and by disassembling the kernel's code
- System.map ( mostly useless nowadays because of ASLR )
**** writing to the read-only memory
Write Protect (bit 16 of CR0) - When set, inhibits supervisor-level procdures
from writing into read-only pages; when clear, allows supervisor-levprocedures
to write into read-only pages (regardless of the U/S bit settinsee Section 4.1.3
and Section 4.6). This flag facilitates implementation of tcopy-on-write method
of creating a new process (forking) used by operatisystems such as UNIX.
***** native pax
#+begin_src C
static inline unsigned long native_pax_open_kernel(void)
{
    unsigned long cr0;

    preempt_disable();
    barrier();
    cr0 = read_cr0() ^ X86_CR0_WP;
    BUG_ON(unlikely(cr0 & X86_CR0_WP));
    write_cr0(cr0);
    return cr0 ^ X86_CR0_WP;
}

static inline unsigned long native_pax_close_kernel(void)
{
    unsigned long cr0;

    cr0 = read_cr0() ^ X86_CR0_WP;
    BUG_ON(unlikely(!(cr0 & X86_CR0_WP)));
    write_cr0(cr0);
    barrier();
    preempt_enable_no_resched();
    return cr0 ^ X86_CR0_WP;
}

native_pax_open_kernel();
sys_call_table[__NR_open] = my_sys_open;
// ... system behaviour code
native_pax_close_kernel();
#+end_src

汇编代码
#+begin_src asm
.macro disable_wp
    cli
    mov eax,cr0
    and eax,0xfffeffff
    mov cr0,eax
.endm

.macro enable_wp
    mov eax,cr0
    or eax,0x10000
    mov cr0,eax
    sti
.endm
#+end_src

***** vmap
使用 vmap 创建一个可写的映射到只读的区域
- 对于区域中的每个页, 将其翻译为 struct page 的虚拟地址
  kernel 的使用 =virt_to_page()=, modules 的使用 vmalloc_to_page().
- 使用 =vmap()= 将这些页映射为虚拟的连续空间 using page protection required
  (=PAGE_KERNEL=).
- 使用 =vunmap()= 恢复映射
#+begin_src C
void *map_writable (void*addr , size_t  len) {
  void *vaddr = NULL;
  void *paddr = (void*)(addr & PAGE_MASK);
  structpage *pages[ ... ];
  for (int i = 0; i < ARRAY_SIZE(pages); i++) {
    if (__module_address ((ulong)paddr))
      pages[i] = vmalloc_to_page(paddr);
    else pages[i] = virt_to_page(paddr);
    if (!pages[i])
      return NULL;
    paddr += PAGE_SIZE;
  }

  vaddr = vmap(pages, ARRAY_SIZE(pages), VM_MAP, PAGE_KERNEL);
  return vaddr? vaddr + offset_in_page(addr) : NULL;
}

size_t slen = __NR_syscall_max * sizeof(sys_call_ptr_t);
sys_call_ptr_t *sptr = map_writable(sys_call_table, slen);
sptr[__NR_open] = my_sys_open;
// ....
vunmap(sptr);
#+end_src
**** hooking in the kernel
- hooking system calls by replacing pointers in =sys_call_table[]=
  and =ia32_sys_call_table[]=.
- hooking virtual methods calls (vtable-like) by replacing pointers in tables
  like =struct file_operations=.
- hooking of kernel symbols by patching their code.
- registering any kind of callbacks and notifiers
  (e.g. =register_module_notifier()=).
- registering LSM security callbacks (hooks).

[[https://github.com/milabs/khook][KHOOK]] - 自动化的内核函数 hooking 引擎:
- based on overwriting target function prologue with =JMP xxx=.
- uses in-kernel length disassembler engine (LDE) to get the number of
  instructions to save before overwriting.
- 被 hook 的函数可以调用其原始函数.
- maintain a use-counter for each hooked function.
  This prevents unhooking of symbols which are in use.

提供了方便的 API:
- =KHOOK(xxx)= macro: declares a hook of function =xxx= (已在其他地方声明)
- =KHOOK_EXT(xxx, typeof(arg0), typeof(arg1), ...)= macro: declares a hook of
  function =xxx= (不用在其他地方声明)
- =KHOOK_GET(xxx)=, =KHOOK_PUT(xxx)= macros: manage symbol's hook use-counter.
- =KHOOK_ORIGIN(xxx, args...)=: calls to the original function.
- =khook_init()=: causes all decared hooks to be installed.
- =khook_cleanup()=:

#+begin_src C
#include "engine/engine.h"
#include "engine/engine.c"

// add the options to the linker
// ldflags-y += -T$(src)/engine/engine.lds
#+end_src

*** Common Techniques
  Demo: [[https://github.com/f0rb1dd3n/Reptile][Reptile]]
**** Hiding process
隐藏进程需要进行以下步骤:
- Managing the processes lifecycle. Be able to attach/detach some attributes
  to process while forking and executing.
- Managing the processes visibility by filtering out =/proc= and some system
  calls.
- Managing the processes CPU-time accounting.

  attach/detach
- Hook =copy_creds()= to be able to attach attributes to processes at fork
  time. Inherit parent process attributes for all direct children, if required
- Hook =exit_creds()= to be able to detach attributes from the processes at
  exit time.
- In it's simplest form at/detaching attributes to processes may be
  implemented by using one of unused bit of =task->flags=, e.g. 0x80000000.

  visibility
- Hook =next_tgid()= to able to filter out =/proc/PID= like directory
  entries. Just skip all the tasks with "hidden" attribute set from
  being iterated.
- Hook =find_task_by_vpid()= to be able to fight against [[https://github.com/Enrico204/unhide][unhide]] by altering
  system calls: =getsid=, =getpgid=, =getpriority=, =sched_getparam=,
  =sched_getaffinity=, =sched_getscheduler=, =sched_rr_get_interval=, =kill=.

CPU-time accouting
- Hook =account_process_tick()= to exclude ticks spent by a hidden processes
  from system wide ticks accounting.
**** Hiding files and directories
- Filtering the access to files or directories by using their full path
  (=open()=-like system calls).
- Filtering files and directories from being listed
  (=filldir()=-like system calls).

  To be able to filter out the access to files or directories by using their
filenames hook the following non-public kernel functions:
- =do_sys_open=
- =user_path_at=
- =user_path_at_empty=

  To filter out files and directories from being listed hook:
- =filldir=, =filldir64=, =fillondir=
- =compat_filldir=, =compat_filldir64=, =compat_fillonedir=
- =__d_lookup=

*** Advanced Techniques
**** kernel auditing bypass
**** filtering the kernel log
=dmesg= or =journalctl=
**** Matryoshka loader
[[https://github.com/milabs/kmatryoshka][kmatryoshka]]

- Write your =payload.ko= in form of LKM without any restrictions.
- Write the =loader.ko= module 来加载加密的 =payload.ko=
- Use =user_addr_max()= to get the current value of user-space address limit
- Extend the user-space address limit (SEG) to fit the decrypted payload
  and use =sys_load_module()= to load.
- 恢复 user-space address limit by using =user_addr_max()= and SEG value.
**** static string obfuscation
用整数代替字符串
