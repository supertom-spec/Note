#+STARTUP: hideblocks
* Introduction
** Godel Incompleteness Theorem
- 蕴含皮亚诺算术公理的一致系统是不完备的
- 对任意能表示自然数的系统，一定有定理不能被证明
** Rice Theorem
- Any non-trivial property about the language recognized by a Turing machine
  (recursively enumerable) is undecidable.
- non-trivial property: at least one Turing machine has the property, and at
  least one hasn't.
- http://kilby.stanford.edu/%7Ervg/154/handouts/Rice.html
- https://blog.csdn.net/baimafujinji/article/details/50179715
- https://mathworld.wolfram.com/RicesTheorem.html
- 给定一个非平凡性质 P，一定存在一个程序 ok_prog 满足 P
- 假设存在检测该性质的程序 P_holds
- 则可以编写函数来检测程序 q 是否能停机，矛盾！
  #+begin_src C
Bool halt(Program q) {
    void evil() {
        Output v = ok_prog();
        q();
        return v;
    }
    return P_holds(evil);
}
  #+end_src

  #+RESULTS:

** soundness, completeness, soundiness
** 求近似解的基本方法
*** abstraction
- 数据抽象
- 控制流抽象
*** search
- 设与原性质有关的变量 a+b*c
- 以某种顺序遍历 a, b, c
- 检查 a>0 && b>0 && c>0 -> a+b*c>0
- 如果不成立，则原性质为假
- 如果遍历完，则原性质为真
- 如果超时，则答案为不知道
- 优化： 1. 启发式搜索 2. 利用运算符性质

* Data Flow
** 单调函数
- 将要分析的性质抽象为带有偏序的半格（对于控制流交汇运算 ⊓ ）
- 控制流交汇处要分析的性质应该具有单调性
- 一般取 f(S) = (S-KILL) ∪ GEN
** 分析框架
- 一个控制流图 (V, E)
- 要分析的性质抽象为一个有限高度的半格 (S, ⊓)
- 一个 entry ∈ V 的初值 I ∈ S
- 对任意 v ∈ (V - entry)，结点转化函数 f_v(pred(v)) 有定义
** 实现算法
#+begin_example
DATA_entry = I
for v in (V - entry):
    DATA_v = T
ToVisit = V - entry
while ToVisit.size > 0:
    v = sample(ToVisit)
    ToVisit -= v
    MEET_v = ⊓( [DATA(w) for w in pred(v)] )
    if DATA_v != f_v(MEET_v):
        ToVisit ∪= succ(v)
    DATA_v = f_v(MEET_v)
#+end_example

使用 datalog 编写的正向数据流分析的标准型(假设转换函数的定义为并集时)
#+begin_src prolog
data(d, v) :- gen(d, v).
data(d, v) :- edge(v1, v), data(d, v1), not_kill(d, v).
data(d, entry).
#+end_src
其中 v 是控制流图中的一个节点, d 表示集合中的一个元素.
data(d, v) 表示节点 v 的待分析属性集合中有 d.

交集的情况:
#+begin_src prolog
data(d, v) :- gen(d, v).
data(d, v) :- data(d, (w for w in pred(v))), not_kill(d, v).
data(d, entry).
#+end_src

复注:
+ not_kill 关系的构造效率较低
+ 如果引入 not 可能会带来矛盾
  - =p(x) :- not p(x)=
  - 不动点角度理解: 单次迭代并非一个单调函数
  - 解决方法: 分层(stratified)规则-谓词上的任何环状依赖不能包含否定规则
+ prolog 中使用 \+ 表示否定

** 小结
*** 构造待分析性质的半格
- 将要分析的性质抽象
- 设计性质的交汇运算，形成半格
*** 构造从控制流图语句 V 到半格 S 的映射
- DATA_entry = I
- for v in V: DATA(v) 有定义
*** 构造交汇处的转化函数
- 由于半格性质，函数需要单调
- 通常定义为 f(D) = (D-KILL) ∪ GEN

*** datalog
 - [[https://note.youdao.com/ynoteshare1/index.html?id=270970f9e5d6f35babba3d022b436fc8&type=note#/][datalog理解]]
* static single assignment

* 小记
1. 词法分析器 + 文法分析器得到 AST 或 LR (暂考虑使用 anltr 等现成的)
   (lex, yacc), (flex, bison), capstone
2. 使用 datalog (souffle) 编写分析逻辑
3. https://github.com/merrychap/shellen

  
* Essentials of PL by Daniel Friedman
** 0 Notes
*** 0.1 datalog
souffle: https://souffle-lang.github.io/install
pyDatalog: https://blog.csdn.net/z2664836046/article/details/83689729
[[https://blog.knownsec.com/2020/11/%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA-codedb-%E6%9D%A5%E6%8E%A2%E7%B4%A2%E5%85%A8%E6%96%B0%E7%9A%84%E7%99%BD%E7%9B%92%E9%9D%99%E6%80%81%E6%89%AB%E6%8F%8F%E6%96%B9%E6%A1%88/][CodeDB + CodeQL]]

example: A B 两个数字对象之间的关系
#+begin_src souffle
.decl A(x:number, y:number) // 声明
A(1,2).                     // 1,2 为 A 关系
A(2,3).

.decl B(x:number, y:number)
B(x,y) :- A(x,y)            // 规则：如果 x,y 为 A 关系，则 x,y 为 B 关系
B(x,z) :- A(x,y), B(y,z).

.output B
#+end_src
** 1 Inductive Sets of Data
*** 1.1 Recursively Specified Data
**** 推理的两种方式
归纳的，*Inductive* way:
(n, m) ∈ S if
1. (n, m) = (0, 0), or
2. (n-1, m-2n+1) ∈ S.
  
#+begin_src scheme :tangle yes :noweb yes :results raw
(define in-S?
  (lambda (n)
    (if (zero? n) 't
        (if (>= (- n 3) 0)
            (in-S? (- n 3))
            'f))))
(in-S? 2)
#+end_src

推理的，*Deductive* way:
S =
1. (0, 0) ∈ S, and
2. if (n, m) ∈ S, then (n+1, m+2n+1) ∈ S.

#+begin_quote
.type Letter <: symbol               // <: subtypes
.type Seq = [ l : Letter, r : Seq ]

.decl letter( l : Letter )
letter("a").
letter("b").

.decl len ( s : Seq, n:number )
len(nil,0).
len(s,n+1) :- seq(s), s = [l,r], len(r,n).

.decl seq ( s : Seq )
seq(nil).
seq([l,s]) :- letter(l), seq(s), len(s,n), n<5.

.decl res( s : symbol )
.output res
res("-") :- seq(nil).
res("a") :- seq(["a", nil ]).
res("b") :- seq(["b", nil ]).
res("c") :- seq(["c", nil ]).
res("ab") :- seq(["a", ["b", nil ]]).
res("aba") :- seq(["a", ["b", ["a", nil ]]]).
res("abc") :- seq(["a", ["b", ["c", nil ]]]).
#+end_quote

*Definition 1.1.5* list of integers, rules of inference
                        n ∈ Int, l ∈ List-of-Int
----------------        ------------------------
() ∈ List-of-Int        (n . l) ∈ List-of-Int

**** 何为 grammar
一套推理规则, 例如 Def 1.1.5, 必要包含
| Terminal    | 如例子中的 '.', '(', ')'              |
| Nonterminal | 如 <expr>, 尖括号为 Backus-Naur Form  |
| Productions | 推理规则. 推理式 A::=B 左边为非终止符 |

简写记号说明:
- '|' 或
- '{...}*' 任意自然数个记号
- '{...}+' 任意正整数和记号
- '{...}*(c)' 用字符 c 分割的任意自然数个记号

*Definition 1.1.8* lambda expression
Terminal Symbols: lambda
LcExp ::= Identifier
      ::= (lambda (Identifier) LcExp)
      ::= (LcExp LcExp)
     
*** 1.2 Deriving Recursive Programs
***** occurs-free
(occurs-free? 'x '((lambda (x) x) (x y))) => #t

Identifier ::= symbol, 判断方法:
1. 如果 e 是一个 Identifier,   则x在e中 occurs-free iff x∈e
2. 如果 e 为 (lambda (y) e'), 则x在e中 occurs-free iff
   x!∈y && x在e'中 occurs-free.
3. 如果 e 为 (e1 e2),         则x在e中 occurs-free iff
   x∈e1 || x∈e2.

#+begin_src scheme
(define occurs-free?
  (lambda (var exp)
    (cond
     ((symbol? exp) (eqv? var exp))
     ((eqv? (car exp) 'lambda)
      (and
       (not (eqv? var (car (cadr exp))))
       (occurs-free? var (caddr exp))))
     (else
      (or
       (occurs-free? var (car exp))
       (occurs-free? var (cadr exp)))))))
#+end_src

***** subst
(subst new old S-list|S-exp)

S-list ::= ()
       ::= (S-exp . S-list)
S-exp  ::= Symbol | S-list

#+begin_src scheme :tangle yes :noweb yes :results raw
(define subst
  (lambda (new old slist)
    (if (null? slist) '()
        (cons
         (subst-in-s-expr new old (car slist))
         (subst new old (cdr slist))))))

(define subst-in-s-expr
  (lambda (new old sexp)
    (if (symbol? sexp)
        (if (eqv? sexp old) new sexp)
        (subst new old sexp))))

(subst 'a 'b '((b c) (b d)))
#+end_src

***** SLOGAN: Follow the Grammar!
- 为语法中的每个非终止符写一个过程
- 对于每个过程，为每个不同的或类别分别写一个子过程

*** 1.3 Auxiliary Procedures and Context Arguments
* 参考链接
计算复杂度基础介绍1: https://zhuanlan.zhihu.com/p/139397047
